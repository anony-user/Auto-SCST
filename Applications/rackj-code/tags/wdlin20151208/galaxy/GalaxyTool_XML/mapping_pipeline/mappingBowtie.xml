<tool id="mappingbowtie_id"  name="Bowtie2">
  <description>Mapping sequences using Bowtie2</description>
  <version_command>bowtie2 --version</version_command>
  <command>
    #if $user_db_opts.optsType == 'user':
      bowtie2-build ${user_db_opts.genomeFasta} userDB &gt; /dev/null &amp;&amp;
    #end if
    
    Mapping.pl
    
    #if $user_db_opts.optsType == 'user':
      x
    #else if $user_db_opts.optsType == 'buildin':
      ${user_db_opts.species.fields.value}
    #end if
    
    ${readFormat_opts.queryRead}
    
    ${outputPrefix}.${adv_opts.outputFormat}
    
    -table $__tool_data_path__/rackj.loc
    
    -showcmd
    
    MappingBowtie.pl
    
    #if $adv_opts.adv_opts_selector == "basic":
      #if str($adv_opts.ID) == "-1":
        -ID -1
      #elif str($adv_opts.ID) == "100":
        -ID 1
      #elif int(str($adv_opts.ID)) &lt; 10:
        -ID 0.0${adv_opts.ID}
      #else
        -ID 0.${adv_opts.ID}
      #end if
      --no-unal
    #elif $adv_opts.adv_opts_selector == "advanced":
        #if str($adv_opts.filtering_opt.filter) == "False":
          #if str($adv_opts.filtering_opt.includeUnaligned) == "true":
            -ID -1
          #else
            --no-unal
          #end if
        #else
          #if str($adv_opts.filtering_opt.ID) == "-1":
            -ID -1
          #elif str($adv_opts.filtering_opt.ID) == "100":
            -ID 1
          #elif int($adv_opts.filtering_opt.ID) &lt; 10:
            -ID 0.0${adv_opts.filtering_opt.ID}
          #else
            -ID 0.${adv_opts.filtering_opt.ID}
          #end if
          
          #if str($adv_opts.filtering_opt.gen_filtered) == "true":
            -SamTmp ${outputPrefix}.unaln.sam
          #end if
        #end if
      ${adv_opts.mode}
      ${adv_opts.sortby}
    #end if
    
    #if str($adv_opts.Kouts) == "":
      -k 5
    #else
      -k ${adv_opts.Kouts}
    #end if
    
    -p 8
    
    #if $user_db_opts.optsType == 'user':
       -target userDB
    #end if
    
    &gt;&gt; ${logFile}
    
    #if $adv_opts.adv_opts_selector == "advanced":
      #if str($adv_opts.filtering_opt.gen_filtered) == "true":
        &amp;&amp; sam2fas.pl ${outputPrefix}.unaln.sam ${unalnFasta} &gt;&gt; ${logFile}
      #end if
    #end if
    
    &amp;&amp; mv ${outputPrefix}.${adv_opts.outputFormat} ${outputFile}
  </command>
  
  <inputs>
    <!-- $dbType and $genomeFasta-->
    <conditional name="user_db_opts">
      <param name="optsType" type="select" label="Select subject type" >
        <option value="user">FASTA File</option>
        <option value="buildin" selected="true">Bowtie2 Database</option>
      </param>
      <when value="user">
        <param name ="genomeFasta" format="fasta" type="data" optional="false" label="FASTA file"/>
      </when>
      <when value="buildin">
        <param name="species" type="select" optional="false" label="Database">
         <options from_file="rackj.loc">
           <column name="value" index="0"/>
           <column name="name" index="1"/>
           <column name="path" index="3"/>
           <filter type="static_value" value="null" keep="false" column="3"/>
         </options>
        </param>
      </when>
    </conditional>
    
    <!-- $readFasta-->
    <conditional name="readFormat_opts">
      <param name="readFormat" type="select" label="Format of query file">
        <option value="fasta" selected="true">fasta</option>
        <option value="fastq">fastq</option>
      </param>
      <when value="fasta">
        <param name ="queryRead" format="fasta" type="data" optional="false" label="FASTA query file"/>
      </when>
      <when value="fastq">
        <param name ="queryRead" format="fastq" type="data" optional="false" label="FASTQ query file"/>
      </when>
    </conditional>    
    <!-- $outputPrefix-->
    <param name="outputPrefix" value="" type="text" size="10" label="Output prefix">
      <validator type="regex" message="This field cannot be empty nor contain any whitespace character">^\S+$</validator>
    </param>
    
    <conditional name="adv_opts">
      <param name="adv_opts_selector" type="select" label="Advanced Options">
        <option value="basic" selected="True">Hide advanced options</option>
        <option value="advanced">Show advanced options</option>
      </param>
      <when value="basic">
        <param name="outputFormat" type="hidden" value="bam"/>
        <param name="ID" type="hidden" value="-1"/>
        <param name="Kouts" type="hidden" value="5"/>
      </when>
      <when value="advanced">
        <!-- $Kouts-->
        <param name ="Kouts" type="integer" size="5" optional="true" value="" label="At most K alignments per read" help="default is 5.">
          <validator type="in_range" message="Search for at most K distinct, valid alignments for each read" min="1" max="9999"/>
        </param>
        <!-- $mode -->
        <param name="mode" type="select" display="radio" label="Alignment mode">
          <option value="--fast">fast</option>
          <option value="--very-fast">very fast</option>
          <option value="--sensitive" selected="true">sensitive</option>
          <option value="--very-sensitive">very sensitive</option>
          <option value="--fast-local">fast local</option>
          <option value="--very-fast-local">very fast local</option>
          <option value="--sensitive-local">sensitive local</option>
          <option value="--very-sensitive-local">very sensitive local</option>
        </param>
        <!-- result filtering-->
        <conditional name="filtering_opt">
            <param name="filter" type="boolean" checked="False" truevalue="true" falsevalue="false" label="Filtering mapping results" />
            <when value="true">
                <param name="includeUnaligned" type="hidden" value="false"/>
                <!-- $ID-->
                <param name ="ID" type="integer" size="5" optional="false" value="" label="Minimum sequence identity (ID, in percent)">
                    <validator type="in_range" message="Minimum identity should be between -1 and 100" min="-1" max="100"/>
                </param>
                <!-- $gen_filtered-->
                <param name ="gen_filtered" type="boolean" checked="False" truevalue="true" falsevalue="false" label="Collect filtered sequences"/>
            </when>
            <when value="false">
                <param name="gen_filtered" type="hidden" value="false"/>
                <param name ="includeUnaligned" type="boolean" checked="False" truevalue="true" falsevalue="false" label="Include unaligned reads"/>
            </when>
        </conditional>
        <!-- $outputformat-->
        <param name="outputFormat" type="select" display="radio" label="Output format">
          <option value="bam" select="true">BAM</option>
          <option value="sam">SAM</option>
        </param>
        <!-- $sortby-->
        <param name="sortby" type="select" display="radio" label="Sort alignment file by">
          <option value="-sortname">Name</option>
          <option value="-sortpos">Position</option>
        </param>
      </when>
    </conditional>
  </inputs>
  
  <outputs>
    <data format="sam" name="outputFile" label="${outputPrefix}.${adv_opts.outputFormat}">
      <change_format>
        <when input="adv_opts.outputFormat" value="bam" format="bam" />
      </change_format>
    </data>
    
    <data format="fasta" name="unalnFasta" label="${outputPrefix}.unaln.fasta">
        <filter>adv_opts['adv_opts_selector'] == 'advanced'</filter>
        <filter>adv_opts['filtering_opt']['gen_filtered'] is True</filter>
    </data>
    
    <data format="txt" name="logFile" label="${outputPrefix}.log"/>
  </outputs>
  
  <help>
For detailed information on Bowtie2, click here_.

.. _here: http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#the-bowtie2-aligner
  </help>
  
</tool>
